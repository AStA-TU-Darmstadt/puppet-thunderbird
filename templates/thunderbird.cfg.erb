//
try {


pref("network.negotiate-auth.trusted-uris", "<%= @kerberos_domain %>");
pref("network.negotiate-auth.delegation-uris", "<%= @kerberos_domain %>");
pref("toolkit.telemetry.prompted", 2);
pref("toolkit.telemetry.rejected", true);
pref("storage.nfs_filesystem", true);
 
var userInfo = new Object(); 
 
userInfo.envUser = getenv("USER");   // USERNAME
userInfo.envHome = getenv("HOME");       // User home directory
 
var ldapHost = "<%= @ldap_server %>";
var ldapBase = "<%= @ldap_base %>";

pref("browser.cache.disk.parent_directory", "/tmp/thunderbird-"+userInfo.envUser);
 
if( userInfo.envUser )
{  var ldapFilter = "uid=" + userInfo.envUser;  }
else
{  throw("Couldn't get UID from the environment");  }
 
// LDAP attributes to retrieve from the server
var ldapAttrs = new Array( "cn", "mail", "uid" ); // add more attributes here, if needed)
 
// Define how to process LDAP results before we make the call
function processLDAPValues(queryResults)
{  if( queryResults )
   {  // Build the userInfo object for later use
      for( var attr in ldapAttrs )
      {  userInfo[ ldapAttrs[attr] ] = getLDAPValue( queryResults, ldapAttrs[attr] );  }
   } else
   {  throw( "No LDAP results" );  }
}
 
getLDAPAttributes( ldapHost, ldapBase, ldapFilter, ldapAttrs.join(",") );

lockPref("mail.identity.id1.fullName", userInfo.cn );
lockPref("mail.identity.id1.smtpServer", "smtp1" );
lockPref("mail.identity.id1.useremail", userInfo.mail );
lockPref("mail.identity.id1.organization", "<%= @organization %>" ); 
lockPref("mail.identity.id1.fcc_folder", "imap://"+userInfo.uid+"@<%= @imap_server %>/Sent" );
lockPref("mail.identity.id1.draft_folder", "imap://"+userInfo.uid+"@<%= @imap_server %>/Drafts" );



// IMAP server settings
lockPref("mail.server.server1.hostname", "<%= @imap_server %>" );
lockPref("mail.server.server1.name", userInfo.mail );
lockPref("mail.server.server1.port", 993 );
lockPref("mail.server.server1.socketType", 3 );
lockPref("mail.server.server1.type", "imap" );
lockPref("mail.server.server1.userName", userInfo.uid );
lockPref("mail.server.server1.authMethod", 5);
lockPref("mail.server.server1.ageLimit", 30);
lockPref("mail.server.server1.autosync_max_age_days", 30);

lockPref("mail.server.server1.daysToKeepBodies", 30);
lockPref("mail.server.server1.daysToKeepHdrs", 30);
lockPref("mail.server.server1.limit_offline_message_size", true);
lockPref("mail.server.server1.offline_download", false);
lockPref("mail.server.server1.spamLevel", 0);
 
// SMTP server settings
lockPref("mail.smtpserver.smtp1.authMethod", 3 );
lockPref("mail.smtpserver.smtp1.description", "<%= @account_description %>" );
lockPref("mail.smtpserver.smtp1.hostname", "<%= @smtp_server %>" );
lockPref("mail.smtpserver.smtp1.port", 465 );
lockPref("mail.smtpserver.smtp1.try_ssl", 3 );
lockPref("mail.smtpserver.smtp1.username", userInfo.uid );
lockPref("mail.smtpserver.smtp1.authMethod", 5);
 
// Glue it all together
lockPref("mail.account.account1.identities", "id1" );
lockPref("mail.account.account1.server", "server1" );
defaultPref("mail.accountmanager.accounts", "account1" );
defaultPref("mail.accountmanager.defaultaccount", "account1" );
defaultPref("mail.smtp.defaultserver", "smtp1" );
defaultPref("mail.smtpservers", "smtp1" );

//LDAP

defaultPref("ldap_2.autoComplete.directoryServer", "ldap_2.servers.ldap1");
defaultPref("ldap_2.autoComplete.useDirectory", true);
lockPref("ldap_2.servers.ldap1.auth.dn", "");
lockPref("ldap_2.servers.ldap1.auth.saslmech", "GSSAPI");
lockPref("ldap_2.servers.ldap1.description", "<%= @account_description %>");
lockPref("ldap_2.servers.ldap1.filename", "ldap1.mab");
lockPref("ldap_2.servers.ldap1.maxHits", 100);
lockPref("ldap_2.servers.ldap1.uri", "<%= @ldap_dir_uri %>");

 
// Close the try, and call the catch()
} catch(e) {
  displayError("lockedPref", e);
}
